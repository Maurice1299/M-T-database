
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author lilmoe12
 */
import java.sql.*;
import java.sql.DriverManager;
import java.sql.Connection;
import java.util.ArrayList;
public class Window extends javax.swing.JFrame {

    /**
     * Creates new form Window
     */
    String driver = "com.mysql.cj.jdbc.Driver";
    String un = "root";
    String pw = "Doubletrocks1";
    String currentTable = "none";
    public Window() {
        try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            String connectionURL = "jdbc:mysql://localhost:3306/patrickspartyrental";
            Connection conn;
            conn = DriverManager.getConnection(connectionURL, un, pw);
            
        }catch (Exception e) {
            System.out.println("SQL Exception: "+ e.toString());
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        Tent = new javax.swing.JButton();
        TentRental = new javax.swing.JButton();
        Parties = new javax.swing.JButton();
        Customer = new javax.swing.JButton();
        Employees = new javax.swing.JButton();
        WorkDays = new javax.swing.JButton();
        WorkOrder = new javax.swing.JButton();
        Scheduling = new javax.swing.JButton();
        Add = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        EditSelected = new javax.swing.JButton();
        Search = new javax.swing.JTextField();
        SearchButton = new javax.swing.JButton();
        Sort = new javax.swing.JButton();
        ClearSearchButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        Tent.setText("Tent");
        Tent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TentActionPerformed(evt);
            }
        });

        TentRental.setText("Tent Rental");
        TentRental.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TentRentalActionPerformed(evt);
            }
        });

        Parties.setText("Parties");
        Parties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PartiesActionPerformed(evt);
            }
        });

        Customer.setText("Customer");
        Customer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustomerActionPerformed(evt);
            }
        });

        Employees.setText("Employees");
        Employees.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmployeesActionPerformed(evt);
            }
        });

        WorkDays.setText("Work Days");
        WorkDays.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WorkDaysActionPerformed(evt);
            }
        });

        WorkOrder.setText("Work Order");
        WorkOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WorkOrderActionPerformed(evt);
            }
        });

        Scheduling.setText("Scheduling");
        Scheduling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SchedulingActionPerformed(evt);
            }
        });

        Add.setText("Add");

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        EditSelected.setText("Edit Selected");
        EditSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditSelectedActionPerformed(evt);
            }
        });

        Search.setText("Search...");
        Search.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SearchFocusGained(evt);
            }
        });
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        Sort.setText("Sort");
        Sort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortActionPerformed(evt);
            }
        });

        ClearSearchButton.setText("Search");
        ClearSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearSearchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Tent)
                            .addComponent(TentRental)
                            .addComponent(Parties)
                            .addComponent(Customer)
                            .addComponent(Employees)
                            .addComponent(WorkDays)
                            .addComponent(WorkOrder)
                            .addComponent(Scheduling))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 741, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Add)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Delete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(EditSelected)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ClearSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(Sort)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Add)
                    .addComponent(Delete)
                    .addComponent(EditSelected)
                    .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchButton)
                    .addComponent(Sort))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(Tent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TentRental)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Parties)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Customer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Employees)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(WorkDays)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(WorkOrder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Scheduling))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ClearSearchButton)
                        .addGap(65, 65, 65)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(154, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DeleteActionPerformed

    private void TentRentalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TentRentalActionPerformed
        // TODO add your handling code here:
        ArrayList<Integer> Tent_IDs = new ArrayList<Integer>();
        ArrayList<Integer> Party_IDs = new ArrayList<Integer>();
        currentTable = "tent_rental";
        try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            String connectionURL = "jdbc:mysql://localhost:3306/patrickspartyrental";
            Connection conn;
            conn = DriverManager.getConnection(connectionURL, un, pw);
            Statement st = conn.createStatement();
            String query = "Select * from tent_rental";
            ResultSet rs = st.executeQuery(query);
            while(rs.next()){
                Tent_IDs.add(rs.getInt(1));
                Party_IDs.add(rs.getInt(2));
            }
            String text = "Tent ID\tParty_ID\n";
            for(int i = 0; i < Tent_IDs.size(); i++){
                text += Tent_IDs.get(i) + "\t" + Party_IDs.get(i) + "\n";
            }
            jTextArea1.setText(text);
            
        }catch (Exception e) {
            System.out.println("SQL Exception: "+ e.toString());
        }
    }//GEN-LAST:event_TentRentalActionPerformed

    private void TentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TentActionPerformed
            // TODO add your handling code here:
            currentTable = "tent";
            ArrayList<Integer> Tent_IDs = new ArrayList<Integer>();
            ArrayList<String> Sizes = new ArrayList<String>();
            ArrayList<Integer> Num_Stakes = new ArrayList<Integer>();
            ArrayList<Integer> Num_Poles = new ArrayList<Integer>();
            ArrayList<Integer> Square_Footages = new ArrayList<Integer>();
            try{
                Class.forName("com.mysql.cj.jdbc.Driver");
                String connectionURL = "jdbc:mysql://localhost:3306/patrickspartyrental";
                Connection conn;
                conn = DriverManager.getConnection(connectionURL, un, pw);
                Statement st = conn.createStatement();
                String query = "Select * from tent";
                ResultSet rs = st.executeQuery(query);
                while(rs.next()){
                    Tent_IDs.add(rs.getInt(1));
                    Sizes.add(rs.getString(2));
                    Num_Stakes.add(rs.getInt(3));
                    Num_Poles.add(rs.getInt(4));
                    Square_Footages.add(rs.getInt(5));
            }
            String text = "Tent_ID\tSize\tNum_Stakes\tNum_Poles\tSquare_Footage\t\n";
            for(int i = 0; i < Tent_IDs.size(); i++){
                text += Tent_IDs.get(i) + "\t" + Sizes.get(i) + "\t" + Num_Stakes.get(i) +
                        "\t" + Num_Poles.get(i) + "\t" + Square_Footages.get(i) + "\n";
            }
            jTextArea1.setText(text);
            }catch (Exception e) {
                System.out.println("SQL Exception: "+ e.toString());
            }
    }//GEN-LAST:event_TentActionPerformed

    private void PartiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PartiesActionPerformed
        // TODO add your handling code here:
        currentTable = "party";
        ArrayList<Integer> Party_IDs = new ArrayList<Integer>();
        ArrayList<Integer> Customer_IDs = new ArrayList<Integer>();
        ArrayList<String> Locations = new ArrayList<String>();
        ArrayList<Date> Setup_Dates = new ArrayList<Date>();
        ArrayList<Date> Takedown_Dates = new ArrayList<Date>();
        ArrayList<Double> Costs = new ArrayList<Double>();
        ArrayList<Integer> Tables = new ArrayList<Integer>();
        ArrayList<Integer> Chairs = new ArrayList<Integer>();
        try{
                Class.forName("com.mysql.cj.jdbc.Driver");
                String connectionURL = "jdbc:mysql://localhost:3306/patrickspartyrental";
                Connection conn;
                conn = DriverManager.getConnection(connectionURL, un, pw);
                Statement st = conn.createStatement();
                String query = "Select * from party";
                ResultSet rs = st.executeQuery(query);
                while(rs.next()){
                    Party_IDs.add(rs.getInt(1));
                    Customer_IDs.add(rs.getInt(2));
                    Locations.add(rs.getString(3));
                    Setup_Dates.add(rs.getDate(4));
                    Takedown_Dates.add(rs.getDate(5));
                    Costs.add(rs.getDouble(6));
                    Tables.add(rs.getInt(7));
                    Chairs.add(rs.getInt(8));

           }
            String text = "Party_ID\tCustomer_ID\tLocation\t\t\t   Setup_Date\t\tTakedown_Date\tCost\tTables\tChairs\n";
            for(int i = 0; i < Party_IDs.size(); i++){
                text += Party_IDs.get(i) + "\t" + Customer_IDs.get(i) + "\t" + Locations.get(i) +
                        "          " + Setup_Dates.get(i) + "\t" + Takedown_Dates.get(i) + "\t\t" + Costs.get(i) +
                        "\t" + Tables.get(i) + "\t" + Chairs.get(i) + "\n";
            }
            jTextArea1.setText(text);
            }catch (Exception e) {
                System.out.println("SQL Exception: "+ e.toString());
            }   
    }//GEN-LAST:event_PartiesActionPerformed

    private void CustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustomerActionPerformed
        // TODO add your handling code here:
        currentTable = "customer";
        ArrayList<Integer> Customer_IDs = new ArrayList<Integer>();
        ArrayList<String> Customer_FNames = new ArrayList<String>();
        ArrayList<String> Customer_LNames = new ArrayList<String>();
        ArrayList<Long> Customer_Phones = new ArrayList<Long>();
        ArrayList<String> Customer_Emails = new ArrayList<String>();
         try{
                Class.forName("com.mysql.cj.jdbc.Driver");
                String connectionURL = "jdbc:mysql://localhost:3306/patrickspartyrental";
                Connection conn;
                conn = DriverManager.getConnection(connectionURL, un, pw);
                Statement st = conn.createStatement();
                String query = "Select * from customer";
                ResultSet rs = st.executeQuery(query);
                while(rs.next()){
                    Customer_IDs.add(rs.getInt(1));
                    Customer_FNames.add(rs.getString(2));
                    Customer_LNames.add(rs.getString(3));
                    Customer_Phones.add(rs.getLong(4));
                    Customer_Emails.add(rs.getString(5));
                }
                String text = "Customer_ID\tCustomer_FName\tCustomer_LName\tCustomer_Phone\tCustomer_Email\n";
                for(int i = 0; i < Customer_IDs.size(); i++){
                    text += Customer_IDs.get(i) + "\t" + Customer_FNames.get(i) + "\t\t" + Customer_LNames.get(i) +
                            "\t\t" + Customer_Phones.get(i) + "\t\t" + Customer_Emails.get(i) + "\n";
                }
                jTextArea1.setText(text);
            }catch (Exception e) {
                System.out.println("SQL Exception: "+ e.toString());
            }
        
    }//GEN-LAST:event_CustomerActionPerformed

    private void EmployeesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmployeesActionPerformed
        // TODO add your handling code here:
        currentTable = "employee";
        ArrayList<Integer> Employee_IDs = new ArrayList<Integer>();
        ArrayList<String> Employee_FNames = new ArrayList<String>();
        ArrayList<String> Employee_LNames = new ArrayList<String>();
        ArrayList<Long> Employee_Phones = new ArrayList<Long>();
        
         try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            String connectionURL = "jdbc:mysql://localhost:3306/patrickspartyrental";
            Connection conn;
            conn = DriverManager.getConnection(connectionURL, un, pw);
            Statement st = conn.createStatement();
            String query = "Select * from employee";
            ResultSet rs = st.executeQuery(query);
            while(rs.next()){
            Employee_IDs.add(rs.getInt(1));
            Employee_FNames.add(rs.getString(2));
            Employee_LNames.add(rs.getString(3));
            Employee_Phones.add(rs.getLong(4));
            }
            String text = "Employee_ID\tEmployee_FName\tEmployee_LName\tEmployee_Phone\n";
            for(int i = 0; i < Employee_IDs.size(); i++){
                text += Employee_IDs.get(i) + "\t" + Employee_FNames.get(i) + "\t\t" + Employee_LNames.get(i) +
                        "\t\t" + Employee_Phones.get(i)+ "\n";
            }
            jTextArea1.setText(text);
        }catch (Exception e) {
            System.out.println("SQL Exception: "+ e.toString());
        }
    }//GEN-LAST:event_EmployeesActionPerformed

    private void WorkDaysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WorkDaysActionPerformed
        // TODO add your handling code here:
        currentTable = "workday";
        ArrayList<Date> Work_Dates = new ArrayList<Date>();
        ArrayList<String> Start_Times = new ArrayList<String>();
        ArrayList<String> End_Times = new ArrayList<String>();
        
        try{
           Class.forName("com.mysql.cj.jdbc.Driver");
           String connectionURL = "jdbc:mysql://localhost:3306/patrickspartyrental";
           Connection conn;
           conn = DriverManager.getConnection(connectionURL, un, pw);
           Statement st = conn.createStatement();
           String query = "Select * from workday";
           ResultSet rs = st.executeQuery(query);
           while(rs.next()){
           Work_Dates.add(rs.getDate(1));
           Start_Times.add(rs.getString(2));
           End_Times.add(rs.getString(3));
           }
           String text = "Work_Date\tStart_Time\tEnd_Time\n";
           for(int i = 0; i < Work_Dates.size(); i++){
               text += Work_Dates.get(i) + "\t" + Start_Times.get(i) + "\t" + End_Times.get(i) + "\n";
           }
           jTextArea1.setText(text);
        }catch (Exception e) {
            System.out.println("SQL Exception: "+ e.toString());
        }
        
    }//GEN-LAST:event_WorkDaysActionPerformed

    private void WorkOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WorkOrderActionPerformed
        // TODO add your handling code here:
        currentTable = "workorder";
        ArrayList<Date> Work_Dates = new ArrayList<Date>();
        ArrayList<Integer> Party_IDs = new ArrayList<Integer>();
        ArrayList<Boolean> Setups = new ArrayList<Boolean>();
        ArrayList<Boolean> Takedowns = new ArrayList<Boolean>();
        ArrayList<Integer> Order_Numbers = new ArrayList<Integer>();
        
         try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            String connectionURL = "jdbc:mysql://localhost:3306/patrickspartyrental";
            Connection conn;
            conn = DriverManager.getConnection(connectionURL, un, pw);
            Statement st = conn.createStatement();
            String query = "Select * from workorder";
            ResultSet rs = st.executeQuery(query);
            while(rs.next()){
            Work_Dates.add(rs.getDate(1));
            Party_IDs.add(rs.getInt(2));
            Setups.add(rs.getBoolean(3));
            Takedowns.add(rs.getBoolean(4));
            Order_Numbers.add(rs.getInt(5));
            }
            String text = "Work_Date\tParty_ID\tSetup\tTakedown\tOrder_Numbers\n";
            for(int i = 0; i < Work_Dates.size(); i++){
                text += Work_Dates.get(i) + "\t" + Party_IDs.get(i) + "\t" + Setups.get(i)+ "\t" + Takedowns.get(i) + "\t" + Order_Numbers.get(i) + "\n";
            }
            jTextArea1.setText(text);
        }catch (Exception e) {
            System.out.println("SQL Exception: "+ e.toString());
        }
    }//GEN-LAST:event_WorkOrderActionPerformed

    private void SchedulingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SchedulingActionPerformed
        // TODO add your handling code here:
        currentTable = "scheduling";
        ArrayList<Integer> Employee_IDs = new ArrayList<Integer>();
        ArrayList<Date> Work_Day_Dates = new ArrayList<Date>();
         try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            String connectionURL = "jdbc:mysql://localhost:3306/patrickspartyrental";
            Connection conn;
            conn = DriverManager.getConnection(connectionURL, un, pw);
            Statement st = conn.createStatement();
            String query = "Select * from scheduling";
            ResultSet rs = st.executeQuery(query);
            while(rs.next()){
                Employee_IDs.add(rs.getInt(1));
                Work_Day_Dates.add(rs.getDate(2));
            }
            String text = "Employee_ID\tWork_Date\n";
            for(int i = 0; i < Employee_IDs.size(); i++){
                text += Employee_IDs.get(i) + "\t" + Work_Day_Dates.get(i) + "\n";
            }
            jTextArea1.setText(text);
        }catch (Exception e) {
            System.out.println("SQL Exception: "+ e.toString());
        }
    }//GEN-LAST:event_SchedulingActionPerformed

    private void EditSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditSelectedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EditSelectedActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_SearchActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        // TODO add your handling code here:
        String searchText = Search.getText();
        switch(currentTable.toLowerCase()){
            case "none":
                jTextArea1.setText("Select a table first");
                break;
            case "tent_rental":
                searchTentRentals(searchText);
                break;
            case "tent":
                searchTents(searchText);
                break;
            case "party":
                searchParties(searchText);
                break;
            case "customer":
                searchCustomers(searchText);
                break;
            case "employee":
                searchEmployees(searchText);
                break;
            case "workday":
                searchWorkDays(searchText);
                break;
            case "workorder":
                searchWorkOrders(searchText);
                break;
            case "scheduling":
                searchSchedulings(searchText);
                break; 
            default:
                jTextArea1.setText("Select a table first");
                break;
        }
    }//GEN-LAST:event_SearchButtonActionPerformed

    private void SortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SortActionPerformed

    private void SearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SearchFocusGained
        // TODO add your handling code here:
        Search.setText("");
        switch(currentTable){
            case "tent_rental":
                TentRental.doClick();
                break;
            case "tent":
                Tent.doClick();
                break;
            case "employee":
                Employees.doClick();
                break;
            case "customer":
                Customer.doClick();
                break;
            case "workday":
                WorkDays.doClick();
                break;
            case "workorder":
                WorkOrder.doClick();
                break;
            case "scheduling":
                Scheduling.doClick();
                break;
            default:
                break;       
        }
    }//GEN-LAST:event_SearchFocusGained

    private void ClearSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearSearchButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ClearSearchButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Window().setVisible(true);
            }
        });
    }
    
    public void searchTentRentals(String searchText){
        searchText = searchText.toLowerCase();
        ArrayList<Integer> Tent_IDs = new ArrayList<Integer>();
        ArrayList<Integer> Party_IDs = new ArrayList<Integer>();
         try{
             Class.forName("com.mysql.cj.jdbc.Driver");
             String connectionURL = "jdbc:mysql://localhost:3306/patrickspartyrental";
             Connection conn;
             conn = DriverManager.getConnection(connectionURL, un, pw);
             Statement st = conn.createStatement();
             String query = "Select * from tent_rental";
             ResultSet rs = st.executeQuery(query);
             while(rs.next()){
                 Tent_IDs.add(rs.getInt(1));
                 Party_IDs.add(rs.getInt(2));
             }
            String text = "Tent ID\tParty_ID\n";                    
            for(int i = 0; i < Tent_IDs.size(); i++){
                if((Tent_IDs.get(i).toString().toLowerCase().equals(searchText)) ||(Party_IDs.get(i).toString().toLowerCase().equals(searchText)))
                text += Tent_IDs.get(i) + "\t" + Party_IDs.get(i) + "\n";
            }
             jTextArea1.setText(text);

         }catch (Exception e) {
             System.out.println("SQL Exception: "+ e.toString());
         }
    }
    public void searchTents(String searchText){
        searchText = searchText.toLowerCase();
        ArrayList<Integer> Tent_IDs = new ArrayList<Integer>();
        ArrayList<String> Sizes = new ArrayList<String>();
        ArrayList<Integer> Num_Stakes = new ArrayList<Integer>();
        ArrayList<Integer> Num_Poles = new ArrayList<Integer>();
        ArrayList<Integer> Square_Footages = new ArrayList<Integer>();
         try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            String connectionURL = "jdbc:mysql://localhost:3306/patrickspartyrental";
            Connection conn;
            conn = DriverManager.getConnection(connectionURL, un, pw);
            Statement st = conn.createStatement();
            String query = "Select * from tent";
            ResultSet rs = st.executeQuery(query);
            while(rs.next()){
            Tent_IDs.add(rs.getInt(1));
            Sizes.add(rs.getString(2));
            Num_Stakes.add(rs.getInt(3));
            Num_Poles.add(rs.getInt(4));
            Square_Footages.add(rs.getInt(5));
        }
        String text = "Tent_ID\tSize\tNum_Stakes\tNum_Poles\tSquare_Footage\t\n";
        for(int i = 0; i < Tent_IDs.size(); i++){
            if(Tent_IDs.get(i).toString().toLowerCase().equals(searchText)){
                text += Tent_IDs.get(i) + "\t" + Sizes.get(i) + "\t" + Num_Stakes.get(i) +
                    "\t" + Num_Poles.get(i) + "\t" + Square_Footages.get(i) + "\n";
            }else if(Sizes.get(i).toString().toLowerCase().equals(searchText)){
                text += Tent_IDs.get(i) + "\t" + Sizes.get(i) + "\t" + Num_Stakes.get(i) +
                    "\t" + Num_Poles.get(i) + "\t" + Square_Footages.get(i) + "\n";
            }else if(Num_Stakes.get(i).toString().toLowerCase().equals(searchText)){
                text += Tent_IDs.get(i) + "\t" + Sizes.get(i) + "\t" + Num_Stakes.get(i) +
                    "\t" + Num_Poles.get(i) + "\t" + Square_Footages.get(i) + "\n";
            }else if(Num_Poles.get(i).toString().toLowerCase().equals(searchText)){
                text += Tent_IDs.get(i) + "\t" + Sizes.get(i) + "\t" + Num_Stakes.get(i) +
                    "\t" + Num_Poles.get(i) + "\t" + Square_Footages.get(i) + "\n";
            }else if(Square_Footages.get(i).toString().toLowerCase().equals(searchText)){
                text += Tent_IDs.get(i) + "\t" + Sizes.get(i) + "\t" + Num_Stakes.get(i) +
                    "\t" + Num_Poles.get(i) + "\t" + Square_Footages.get(i) + "\n";
            }

        }
        jTextArea1.setText(text);
        }catch (Exception e) {
            System.out.println("SQL Exception: "+ e.toString());
        }
    }
    
    public void searchParties(String searchText){
        searchText = searchText.toLowerCase();
        ArrayList<Integer> Party_IDs = new ArrayList<Integer>();
        ArrayList<Integer> Customer_IDs = new ArrayList<Integer>();
        ArrayList<String> Locations = new ArrayList<String>();
        ArrayList<Date> Setup_Dates = new ArrayList<Date>();
        ArrayList<Date> Takedown_Dates = new ArrayList<Date>();
        ArrayList<Double> Costs = new ArrayList<Double>();
        ArrayList<Integer> Tables = new ArrayList<Integer>();
        ArrayList<Integer> Chairs = new ArrayList<Integer>();
         try{
                Class.forName("com.mysql.cj.jdbc.Driver");
                String connectionURL = "jdbc:mysql://localhost:3306/patrickspartyrental";
                Connection conn;
                conn = DriverManager.getConnection(connectionURL, un, pw);
                Statement st = conn.createStatement();
                String query = "Select * from party";
                ResultSet rs = st.executeQuery(query);
                while(rs.next()){
                Party_IDs.add(rs.getInt(1));
                Customer_IDs.add(rs.getInt(2));
                Locations.add(rs.getString(3));
                Setup_Dates.add(rs.getDate(4));
                Takedown_Dates.add(rs.getDate(5));
                Costs.add(rs.getDouble(6));
                Tables.add(rs.getInt(7));
                Chairs.add(rs.getInt(8));
                }
                String text = "Party_ID\tCustomer_ID\tLocation\t\t\t   Setup_Date\t\tTakedown_Date\tCost\tTables\tChairs\n";
                for(int i = 0; i < Party_IDs.size(); i++){
                    if(Party_IDs.get(i).toString().toLowerCase().equals(searchText)){
                        text += Party_IDs.get(i) + "\t" + Customer_IDs.get(i) + "\t" + Locations.get(i) +
                            "          " + Setup_Dates.get(i) + "\t" + Takedown_Dates.get(i) + "\t\t" + Costs.get(i) +
                            "\t" + Tables.get(i) + "\t" + Chairs.get(i) + "\n";
                    }else if(Customer_IDs.get(i).toString().toLowerCase().equals(searchText)){
                        text += Party_IDs.get(i) + "\t" + Customer_IDs.get(i) + "\t" + Locations.get(i) +
                            "          " + Setup_Dates.get(i) + "\t" + Takedown_Dates.get(i) + "\t\t" + Costs.get(i) +
                            "\t" + Tables.get(i) + "\t" + Chairs.get(i) + "\n";
                    }else if(Locations.get(i).toString().toLowerCase().contains(searchText)){
                        text += Party_IDs.get(i) + "\t" + Customer_IDs.get(i) + "\t" + Locations.get(i) +
                            "          " + Setup_Dates.get(i) + "\t" + Takedown_Dates.get(i) + "\t\t" + Costs.get(i) +
                            "\t" + Tables.get(i) + "\t" + Chairs.get(i) + "\n";
                    }else if(Setup_Dates.get(i).toString().toLowerCase().equals(searchText)){
                        text += Party_IDs.get(i) + "\t" + Customer_IDs.get(i) + "\t" + Locations.get(i) +
                            "          " + Setup_Dates.get(i) + "\t" + Takedown_Dates.get(i) + "\t\t" + Costs.get(i) +
                            "\t" + Tables.get(i) + "\t" + Chairs.get(i) + "\n";
                    }else if(Takedown_Dates.get(i).toString().toLowerCase().equals(searchText)){
                        text += Party_IDs.get(i) + "\t" + Customer_IDs.get(i) + "\t" + Locations.get(i) +
                            "          " + Setup_Dates.get(i) + "\t" + Takedown_Dates.get(i) + "\t\t" + Costs.get(i) +
                            "\t" + Tables.get(i) + "\t" + Chairs.get(i) + "\n";
                    }else if(Costs.get(i).toString().toLowerCase().equals(searchText)){
                        text += Party_IDs.get(i) + "\t" + Customer_IDs.get(i) + "\t" + Locations.get(i) +
                            "          " + Setup_Dates.get(i) + "\t" + Takedown_Dates.get(i) + "\t\t" + Costs.get(i) +
                            "\t" + Tables.get(i) + "\t" + Chairs.get(i) + "\n";
                    }else if(Tables.get(i).toString().toLowerCase().equals(searchText)){
                        text += Party_IDs.get(i) + "\t" + Customer_IDs.get(i) + "\t" + Locations.get(i) +
                            "          " + Setup_Dates.get(i) + "\t" + Takedown_Dates.get(i) + "\t\t" + Costs.get(i) +
                            "\t" + Tables.get(i) + "\t" + Chairs.get(i) + "\n";
                    }else if(Chairs.get(i).toString().toLowerCase().equals(searchText)){
                        text += Party_IDs.get(i) + "\t" + Customer_IDs.get(i) + "\t" + Locations.get(i) +
                            "          " + Setup_Dates.get(i) + "\t" + Takedown_Dates.get(i) + "\t\t" + Costs.get(i) +
                            "\t" + Tables.get(i) + "\t" + Chairs.get(i) + "\n";
                    }  
            }
            jTextArea1.setText(text);
            }catch (Exception e) {
                System.out.println("SQL Exception: "+ e.toString());
            }
    }
    public void searchCustomers(String searchText){
        searchText = searchText.toLowerCase();
        ArrayList<Integer> Customer_IDs = new ArrayList<Integer>();
        ArrayList<String> Customer_FNames = new ArrayList<String>();
        ArrayList<String> Customer_LNames = new ArrayList<String>();
        ArrayList<Long> Customer_Phones = new ArrayList<Long>();
        ArrayList<String> Customer_Emails = new ArrayList<String>();
         try{
                Class.forName("com.mysql.cj.jdbc.Driver");
                String connectionURL = "jdbc:mysql://localhost:3306/patrickspartyrental";
                Connection conn;
                conn = DriverManager.getConnection(connectionURL, un, pw);
                Statement st = conn.createStatement();
                String query = "Select * from customer";
                ResultSet rs = st.executeQuery(query);
                while(rs.next()){
                    Customer_IDs.add(rs.getInt(1));
                    Customer_FNames.add(rs.getString(2));
                    Customer_LNames.add(rs.getString(3));
                    Customer_Phones.add(rs.getLong(4));
                    Customer_Emails.add(rs.getString(5));
                }
                String text = "Customer_ID\tCustomer_FName\tCustomer_LName\tCustomer_Phone\tCustomer_Email\n";
                for(int i = 0; i < Customer_IDs.size(); i++){
                    if(Customer_IDs.get(i).toString().toLowerCase().equals(searchText)){
                        text += Customer_IDs.get(i) + "\t" + Customer_FNames.get(i) + "\t\t" + Customer_LNames.get(i) +
                            "\t\t" + Customer_Phones.get(i) + "\t\t" + Customer_Emails.get(i) + "\n";
                    }else if(Customer_FNames.get(i).toString().toLowerCase().equals(searchText)){
                        text += Customer_IDs.get(i) + "\t" + Customer_FNames.get(i) + "\t\t" + Customer_LNames.get(i) +
                            "\t\t" + Customer_Phones.get(i) + "\t\t" + Customer_Emails.get(i) + "\n";
                    }else if(Customer_LNames.get(i).toString().toLowerCase().equals(searchText)){
                        text += Customer_IDs.get(i) + "\t" + Customer_FNames.get(i) + "\t\t" + Customer_LNames.get(i) +
                            "\t\t" + Customer_Phones.get(i) + "\t\t" + Customer_Emails.get(i) + "\n";
                    }else if(Customer_Phones.get(i).toString().toLowerCase().equals(searchText)){
                        text += Customer_IDs.get(i) + "\t" + Customer_FNames.get(i) + "\t\t" + Customer_LNames.get(i) +
                            "\t\t" + Customer_Phones.get(i) + "\t\t" + Customer_Emails.get(i) + "\n";
                    }else if(Customer_Emails.get(i).toString().toLowerCase().equals(searchText)){
                        text += Customer_IDs.get(i) + "\t" + Customer_FNames.get(i) + "\t\t" + Customer_LNames.get(i) +
                            "\t\t" + Customer_Phones.get(i) + "\t\t" + Customer_Emails.get(i) + "\n";
                    }
                }
                jTextArea1.setText(text);
            }catch (Exception e) {
                System.out.println("SQL Exception: "+ e.toString());
            }
    }
    public void searchEmployees(String searchText){
        searchText = searchText.toLowerCase();
        ArrayList<Integer> Employee_IDs = new ArrayList<Integer>();
        ArrayList<String> Employee_FNames = new ArrayList<String>();
        ArrayList<String> Employee_LNames = new ArrayList<String>();
        ArrayList<Long> Employee_Phones = new ArrayList<Long>();
        
        try{
           Class.forName("com.mysql.cj.jdbc.Driver");
           String connectionURL = "jdbc:mysql://localhost:3306/patrickspartyrental";
           Connection conn;
           conn = DriverManager.getConnection(connectionURL, un, pw);
           Statement st = conn.createStatement();
           String query = "Select * from employee";
           ResultSet rs = st.executeQuery(query);
           while(rs.next()){
                Employee_IDs.add(rs.getInt(1));
                Employee_FNames.add(rs.getString(2));
                Employee_LNames.add(rs.getString(3));
                Employee_Phones.add(rs.getLong(4));
           }
           String text = "Employee_ID\tEmployee_FName\tEmployee_LName\tEmployee_Phone\n";
           for(int i = 0; i < Employee_IDs.size(); i++){
               if(Employee_IDs.get(i).toString().toLowerCase().equals(searchText)){
                   text += Employee_IDs.get(i) + "\t" + Employee_FNames.get(i) + "\t\t" + Employee_LNames.get(i) +
                           "\t\t" + Employee_Phones.get(i)+ "\n";
               }else if(Employee_FNames.get(i).toString().toLowerCase().equals(searchText)){
                   text += Employee_IDs.get(i) + "\t" + Employee_FNames.get(i) + "\t\t" + Employee_LNames.get(i) +
                           "\t\t" + Employee_Phones.get(i)+ "\n";
               }else if(Employee_LNames.get(i).toString().toLowerCase().equals(searchText)){
                   text += Employee_IDs.get(i) + "\t" + Employee_FNames.get(i) + "\t\t" + Employee_LNames.get(i) +
                           "\t\t" + Employee_Phones.get(i)+ "\n";
               }else if(Employee_Phones.get(i).toString().toLowerCase().equals(searchText)){
                   text += Employee_IDs.get(i) + "\t" + Employee_FNames.get(i) + "\t\t" + Employee_LNames.get(i) +
                           "\t\t" + Employee_Phones.get(i)+ "\n";
               }
           }
           jTextArea1.setText(text);
        }catch (Exception e) {
            System.out.println("SQL Exception: "+ e.toString());
        }
    }
    public void searchWorkDays(String searchText){
        searchText = searchText.toLowerCase();
        ArrayList<Date> Work_Dates = new ArrayList<Date>();
        ArrayList<String> Start_Times = new ArrayList<String>();
        ArrayList<String> End_Times = new ArrayList<String>();
        
         try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            String connectionURL = "jdbc:mysql://localhost:3306/patrickspartyrental";
            Connection conn;
            conn = DriverManager.getConnection(connectionURL, un, pw);
            Statement st = conn.createStatement();
            String query = "Select * from workday";
            ResultSet rs = st.executeQuery(query);
            while(rs.next()){
            Work_Dates.add(rs.getDate(1));
            Start_Times.add(rs.getString(2));
            End_Times.add(rs.getString(3));
            }
            String text = "Work_Date\tStart_Time\tEnd_Time\n";
            for(int i = 0; i < Work_Dates.size(); i++){
                if(Work_Dates.get(i).toString().toLowerCase().equals(searchText)){
                    text += Work_Dates.get(i) + "\t" + Start_Times.get(i) + "\t" + End_Times.get(i) + "\n";
                }else if(Start_Times.get(i).toString().toLowerCase().equals(searchText)){
                    text += Work_Dates.get(i) + "\t" + Start_Times.get(i) + "\t" + End_Times.get(i) + "\n";
                }else if(End_Times.get(i).toString().toLowerCase().equals(searchText)){
                    text += Work_Dates.get(i) + "\t" + Start_Times.get(i) + "\t" + End_Times.get(i) + "\n";
                }
            }
            jTextArea1.setText(text);
        }catch (Exception e) {
            System.out.println("SQL Exception: "+ e.toString());
        }
    }
    public void searchWorkOrders(String searchText){
        searchText = searchText.toLowerCase();
        ArrayList<Date> Work_Dates = new ArrayList<Date>();
        ArrayList<Integer> Party_IDs = new ArrayList<Integer>();
        ArrayList<Boolean> Setups = new ArrayList<Boolean>();
        ArrayList<Boolean> Takedowns = new ArrayList<Boolean>();
        ArrayList<Integer> Order_Numbers = new ArrayList<Integer>();
        
        try{
           Class.forName("com.mysql.cj.jdbc.Driver");
           String connectionURL = "jdbc:mysql://localhost:3306/patrickspartyrental";
           Connection conn;
           conn = DriverManager.getConnection(connectionURL, un, pw);
           Statement st = conn.createStatement();
           String query = "Select * from workorder";
           ResultSet rs = st.executeQuery(query);
           while(rs.next()){
           Work_Dates.add(rs.getDate(1));
           Party_IDs.add(rs.getInt(2));
           Setups.add(rs.getBoolean(3));
           Takedowns.add(rs.getBoolean(4));
           Order_Numbers.add(rs.getInt(5));
           }
           String text = "Work_Date\tParty_ID\tSetup\tTakedown\tOrder_Numbers\n";
           for(int i = 0; i < Work_Dates.size(); i++){
                if(Work_Dates.get(i).toString().toLowerCase().equals(searchText)){
                     text += Work_Dates.get(i) + "\t" + Party_IDs.get(i) + "\t" + Setups.get(i)+ "\t" + Takedowns.get(i) + "\t" + Order_Numbers.get(i) + "\n";
                }else if(Party_IDs.get(i).toString().toLowerCase().equals(searchText)){
                     text += Work_Dates.get(i) + "\t" + Party_IDs.get(i) + "\t" + Setups.get(i)+ "\t" + Takedowns.get(i) + "\t" + Order_Numbers.get(i) + "\n";
                }else if(Setups.get(i).toString().toLowerCase().equals(searchText)){
                     text += Work_Dates.get(i) + "\t" + Party_IDs.get(i) + "\t" + Setups.get(i)+ "\t" + Takedowns.get(i) + "\t" + Order_Numbers.get(i) + "\n";
                }else if(Takedowns.get(i).toString().toLowerCase().equals(searchText)){
                     text += Work_Dates.get(i) + "\t" + Party_IDs.get(i) + "\t" + Setups.get(i)+ "\t" + Takedowns.get(i) + "\t" + Order_Numbers.get(i) + "\n";
                }else if(Order_Numbers.get(i).toString().toLowerCase().equals(searchText)){
                     text += Work_Dates.get(i) + "\t" + Party_IDs.get(i) + "\t" + Setups.get(i)+ "\t" + Takedowns.get(i) + "\t" + Order_Numbers.get(i) + "\n";
                }
            }
           jTextArea1.setText(text);
        }catch (Exception e) {
            System.out.println("SQL Exception: "+ e.toString());
        }
    }
    public void searchSchedulings(String searchText){
        searchText = searchText.toLowerCase();
        ArrayList<Integer> Employee_IDs = new ArrayList<Integer>();
        ArrayList<Date> Work_Day_Dates = new ArrayList<Date>();
         try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            String connectionURL = "jdbc:mysql://localhost:3306/patrickspartyrental";
            Connection conn;
            conn = DriverManager.getConnection(connectionURL, un, pw);
            Statement st = conn.createStatement();
            String query = "Select * from scheduling";
            ResultSet rs = st.executeQuery(query);
            while(rs.next()){
                Employee_IDs.add(rs.getInt(1));
                Work_Day_Dates.add(rs.getDate(2));
            }
            String text = "Employee_ID\tWork_Date\n";
            for(int i = 0; i < Employee_IDs.size(); i++){
                if(Employee_IDs.get(i).toString().toLowerCase().equals(searchText)){
                    text += Employee_IDs.get(i) + "\t" + Work_Day_Dates.get(i) + "\n";
                }else  if(Work_Day_Dates.get(i).toString().toLowerCase().equals(searchText)){
                    text += Employee_IDs.get(i) + "\t" + Work_Day_Dates.get(i) + "\n";
                }
            }
            jTextArea1.setText(text);
        }catch (Exception e) {
            System.out.println("SQL Exception: "+ e.toString());
        }
    }
    
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JButton ClearSearchButton;
    private javax.swing.JButton Customer;
    private javax.swing.JButton Delete;
    private javax.swing.JButton EditSelected;
    private javax.swing.JButton Employees;
    private javax.swing.JButton Parties;
    private javax.swing.JButton Scheduling;
    private javax.swing.JTextField Search;
    private javax.swing.JButton SearchButton;
    private javax.swing.JButton Sort;
    private javax.swing.JButton Tent;
    private javax.swing.JButton TentRental;
    private javax.swing.JButton WorkDays;
    private javax.swing.JButton WorkOrder;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
